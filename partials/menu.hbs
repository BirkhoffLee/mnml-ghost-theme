<style>
.modal-overlay {
  background: slategray;
  height: 100%;
  left: 0;
  display: flex;
  overflow: auto;
  position: fixed;
  top: 0;
  transition: opacity .2s;
  width: 100%;
  height: 100%;
  z-index: -1;
  text-align: center;
}

.modal-overlay[aria-hidden="true"] {
  opacity: 0;
  visibility: hidden;
}

.modal-overlay[aria-hidden="false"] {
  opacity: 1;
  visibility: visible;
  z-index: 3;
}


/*
  Modal Content Area
*/
.modal-content {
  background:slategray;
  margin: auto;
  overflow: auto;
  overflow-x: hidden;
  padding: 1.5em;
  box-sizing: border-box;
  position: relative;
  transform: scale(.8);
  transition: transform .3s;
  width: 80%;
  height: 80%;
  color:#fdfdfd;
  border:none;
}

.modal-overlay[aria-hidden="false"] .modal-content {
  transform: scale(1);
}

#modal_title {
  margin-top: 0;
  font-weight: 900;
  text-transform: uppercase;
  color:#BBC7CC;
}

.btn-close {
  color:#fdfdfd;
  background: none;
  border: none;
  cursor: pointer;
  font-size: 4em;
  font-weight: 400;
  line-height: 0;
  padding: 0;
  position: absolute;
  right:.3em;
  top:0;
  z-index: 2;
  cursor: pointer;
}


/* Hamburger Menu Icon */
.open-menu,
.open-menu:hover,
.btn-close,
.btn-close:hover{
  background: none;
  border:none;
  box-shadow: none;
}

.open-menu {
  position: absolute;
  top:.5rem;
  right:.5em;
  padding: 0;
}

.post-template .open-menu,
.author-template .open-menu{
  top:.5rem;
}

.open-menu svg #menu-icon {
  fill: #dd4814;
  -webkit-transition: .3s;
  -o-transition: .3s;
  transition: .3s;
}

.open-menu svg:hover #menu-icon {
  fill: orange;
  -webkit-transition: .3s;
  -o-transition: .3s;
  transition: .3s;
}

/* Navigation styles in Menu */
  .menu li{
    list-style-type:none;
    font-family: Source Sans Pro;
    font-weight: 900;
  }
  .menu a{
    text-decoration: none;
    border-bottom: 1px dotted #fdfdfd;
    color:#fdfdfd;
  }

  .menu a:hover{
    color:white;
    border-bottom: 1px solid #fff;
  }

  .flex-container{
    display: flex;
  }

  .flex-container--center{
    align-items: center;
    justify-content: center;
  }

  .flex-child{
    align-self:center;
  }

</style>

    <button class="open-menu" type="button" id="modal_open">
      <svg version="1.1" id="menu-icon-svg" xmlns="http://www.w3.org/2000/svg"
      xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" width="21px"
      height="21px" viewBox="0 0 20 19" enable-background="new 0 0 21 21"
      xml:space="preserve">
      <path fill="none" d="z"/>
      <g id="menu-icon">
        <rect width="21" height="3"/>
        <rect y="7" width="21" height="3"/>
        <rect y="14" width="21" height="3"/>
      </g>
      <path fill="none" d="z"/>
      </svg>

    </button>

    <div class="menu modal-overlay" id="modal_window"
             aria-hidden="true" role="dialog"
             aria-labelledby="Menu popup">
      <div class="modal-content flex-container flex-container--center" id="modal_holder" role="document">

        <div class="flex-child">
          <h1 class="beta" id="modal_title">Menu</h1>
          ***

          <nav role="navigation" class="beta">
            <li><a href="{{@blog.url}}">Home</a></li>
            <li><a href="{{@blog.url}}/about">About</a></li>
            <li><a href="{{@blog.url}}/contact">Contact</a></li>
          </nav>
        </div>



      </div> <!-- end .modal-content -->
      <button class="btn-close" id="modal_close" type="button" aria-label="close">
          &times;
        </button>
    </div> <!-- end .modal-overlay -->




<script>
// helper function to place modal window as the first child
// of the #page node
var m = document.getElementById('modal_window'),
    p = document.getElementById('body');

function swap () {
  p.parentNode.insertBefore(m, p);
}

swap();

// modal window
(function() {

  'use strict';

  // list out the vars
  var mOverlay = getId('modal_window'),
      mOpen = getId('modal_open'),
      mClose = getId('modal_close'),
      modal = getId('modal_holder'),
      allNodes = document.querySelectorAll("*"),
      modalOpen = false,
      lastFocus,
      i;

  // Let's cut down on what we need to type to get an ID
  function getId ( id ) {
    return document.getElementById(id);
  }

  // Let's open the modal
  function modalShow () {
    lastFocus = document.activeElement;
    mOverlay.setAttribute('aria-hidden', 'false');
    modalOpen = true;
    modal.setAttribute('tabindex', '0');
    modal.focus();
  }

  // binds to both the button click and the escape key to close the modal window
  // but only if modalOpen is set to true
  function modalClose ( event ) {
    if (modalOpen && ( !event.keyCode || event.keyCode === 27 ) ) {
      mOverlay.setAttribute('aria-hidden', 'true');
      modal.setAttribute('tabindex', '-1');
      modalOpen = false;
      lastFocus.focus();
    }
  }

  // Restrict focus to the modal window when it's open.
  // Tabbing will just loop through the whole modal.
  // Shift + Tab will allow backup to the top of the modal,
  // and then stop.
  function focusRestrict ( event ) {
    if ( modalOpen && !modal.contains( event.target ) ) {
      event.stopPropagation();
      modal.focus();
    }
  }

  // Close modal window by clicking on the overlay
  mOverlay.addEventListener('click', function( e ) {
    if (e.target == modal.parentNode) {
       modalClose( e );
     }
  }, false);


  // open modal by btn click/hit
  mOpen.addEventListener('click', modalShow);

  // close modal by btn click/hit
  mClose.addEventListener('click', modalClose);

  // close modal by keydown, but only if modal is open
  document.addEventListener('keydown', modalClose);

  // restrict tab focus on elements only inside modal window
  for (i = 0; i < allNodes.length; i++) {
    allNodes.item(i).addEventListener('focus', focusRestrict);
  }

})();

</script>
